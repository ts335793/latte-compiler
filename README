Autor: Tomasz Stęczniewski ts335793

Uruchamianie i kompilacja
- kompilacja: make
- uruchamianie: ./latc_llvm input.ll
W labach nie udało mi się skompilować projektu z powodu nie istniejących pakietów cabala.

Analiza semantyczna
- Traktuje inkrementację i dekrementację jako wyrażenia.
- Akceptuje język ze wszystkimi rozszerzeniami (tablice, struktury, obiekty, metody wirtualne)
- Akceptuje rzutowanie obiektów dowolnych typów (klasy na nad / podklasy, typy wbudowane na same siebie).
- Traktuje null jako wartość dowolnego typu wskaźnikowego.
- Umożliwia zmianę typów metod wirtualnych w podklasach zgodnie z kowariancją i kontrawariancją.
- "self" w metodach jest zmienną a nie częścią semantyki (można na nią przypisywać).
- Pola obiektów nie są widoczne w klasach dziedziczących i mogą być nadpisywane w klasach dziedziczących.
  Można odwołać się do pól nadklasy/podklasy poprzez rzutowanie self na nadklasę/podklasę.
- W metodach wywołanie f() najpierw przeszukuje przestrzeń metod, a później funkcji globalnych.
- Przestrzenie nazw metod, funkcji, klas i zmiennych lokalnych są niezależne (może istnieć klasa i zmienna o nazwie x).

Kompilator
- Kompiluje programy w podstawowej wersji języka.
- Traktuje inkrementację i dekrementację jako wyrażenia.
- Obsługuje operatory relacyjne dla napisów.
- Generuje kod LLVM w postaci SSA.
- Zwija stałe typu int i bool.
- Usuwa nieosiągalne bloki.
- Usuwa nieosiągalne instrukcje.
- Usuwa martwe zmienne.
- Usuwa nieosiągalne skoki.
- Robi propagację kopii.

Funkcje wbudowane
void printInt(int) - wypisuje int i znak nowej linii
void printString(string) - wypisuje string i znak nowej linii
void error() - tak jak w treści
int readInt() - wczytuje int i resztę linii wraz z enterem
string readString() - wczytuje linię i enter, zwraca string bez znaku nowej linii
